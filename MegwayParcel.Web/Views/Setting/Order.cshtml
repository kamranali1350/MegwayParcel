@model List<MegwayParcel.Common.Data.Order>
@using MegwayParcel.Common.Data
@using Newtonsoft.Json;
@using MegwayParcel.Common
@using Microsoft.AspNetCore.Http
@{
    ViewData["Title"] = "Completed Order";
    Layout = "/Views/Shared/_NewLayout.cshtml";
}

<div class="container-fluid py-5 bg-secondary">
    <div class="container">
        <h1>Your Basket</h1>
        <div class="align-items-center">
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <td>Quote Reference</td>
                        <td>Carrier</td>
                        <td>Service</td>
                        <td>Chargeable weight</td>
                        <td>Price</td>
                        <td>Surcharges</td>
                        <td>Collection</td>
                        <td>Insurance</td>
                        <td>Total</td>
                        <td>Payment</td>
                        <td>Payment Ref</td>
                        <td>Status</td>
                        <td>Price</td>
                        <td>Surcharges</td>
                       
                        <td>Collection</td>
                        <td>Insurance</td>
                        <td>Total</td>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        var shipmentResult = JsonConvert.DeserializeObject<ServiceResult>(item.SelectQuote);
                        var surcharge1 = (item.Surcharges) + (item.RemoteSurcharges);

                        <tr>
                            <input type="hidden" class="orderid" value="@item.OrderId" />
                            <td>Quote Reference</td>
                            <td>@shipmentResult.CarrierName</td>
                            <td>@shipmentResult.ServiceName</td>
                            <td>@shipmentResult.ChargeableWeight</td>
                            <td>@item.ShippingCharges</td>
                            <td>@(surcharge1)</td>

                            <td>@(String.Format("{0:0.00}", item.CollectionCharges))</td>
                            <td>@(String.Format("{0:0.00}", item.InsuranceCharges))</td>
                            <td>@(String.Format("{0:0.00}", item.TotalCharges))</td>
                            <td>Need to Fix</td>
                            <td>Need to Fix</td>
                            <td>Need to Fix</td>

                            <td>
                                @{
                                    var surcharge = shipmentResult.ServicePriceBreakdown?.Where(x => x.Code == "ISC").FirstOrDefault();
                                    var remoteSurchage = shipmentResult.ServicePriceBreakdown?.Where(x => x.Code == "RSC").FirstOrDefault();
                                    double sur = 0;
                                    if (surcharge != null)
                                    {
                                        sur = surcharge.Cost;
                                    }
                                    if (remoteSurchage != null)
                                    {
                                        sur += remoteSurchage.Cost;
                                    }
                                }

                                <span>@(String.Format("{0:0.00}", sur))</span>

                            </td>
                            <td>
                                @{
                                    var freightCharges = shipmentResult.ServicePriceBreakdown?.Where(x => x.Code == "FRT").FirstOrDefault();
                                }
                                @if (freightCharges != null)
                                {
                                    <span>@(String.Format("{0:0.00}", freightCharges.Cost))</span>
                                  
                                }
                                else
                                {
                                    <span>0.00</span>
                                }
                            </td>
                            <td>
                                @{
                                    var collection = shipmentResult.CollectionOptions.Where(x => x.CollectionOptionID == item.CollectionOptionId).FirstOrDefault();
                                }
                                @if (collection != null)
                                {
                                    <span>@(collection.CollectionCharge)</span>
                                }
                                else
                                {
                                    <span>0.00</span>
                                }
                            </td>
                            <td>
                                @item.InsuranceCharges
                            </td>
                        </tr>
                    }
                </tbody>
            </table>




        </div>
    </div>
</div>
<script>

    //$(".addCart").click(function () {
    //    updateCart(false);
    //});
    //$(".removeCart").click(function () {
    //    updateCart(true);
    //});
    function updateCart(orderId, isRemove) {
        $.ajax({
            url: "/Address/OrderConfirm?orderId=" + orderId + "&isRemove=" + isRemove,
            type: "GET",
            datatype: "json",
            success: function(data) {
                debugger;
                if (isRemove) {
                    window.location.href = "/Address/Basket"
                } else {
                    window.location.href = "/Address/Collection?orderId=" + orderId
                }
            },
            beforeSend: function() {
                $("#waitSpinnerId").show();
            },
            error: function(xhr) { // if error occured

            },
            complete: function() {
                $("#waitSpinnerId").hide();
            },

        });
    }
</script>